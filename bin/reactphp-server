<?php

require dirname(__DIR__, 3) . '/autoload.php';

/*
 * Helpers
 */
$rpssPrefix = '.reactphp-symfony-server-dist-';
$projectRootPath = dirname(__DIR__, 4   );

/*
 * Preparation of reference data
 */

// Check if the symfony index file exists and extract its date
$symfonyIndexFile = $projectRootPath . DIRECTORY_SEPARATOR . 'public' . DIRECTORY_SEPARATOR . 'index.php';

$symfonyIndexFileInfoObj = new SplFileInfo($symfonyIndexFile);

if (!$symfonyIndexFileInfoObj->isFile()) {
    throw new RuntimeException('The file ' . $symfonyIndexFileInfoObj->getPath() . ' does not exist');
}

$symfonyIndexFileDate = $symfonyIndexFileInfoObj->getMTime();

// Extract the bin file date
$binDate = (new SplFileInfo(__FILE__))->getMTime();

// See which is the most recent
$updatedDate = max($binDate, $symfonyIndexFileDate);

// Check if script file has been created and is updated
$created = false;

if ($files = glob(__DIR__ .  DIRECTORY_SEPARATOR . $rpssPrefix . '*')) {
    $file = array_shift($files);

    // Extract the reference date
    preg_match('#-(\d+)$#', $file, $matches);
    $refDate = (int) $matches[1];

    if ($refDate === $updatedDate) {
        $created = $file;
    } else {
        unlink($file);
    }
}

// Create the script if needed
if (!$created) {
    echo "Updating Startup...\n";

    $path = __DIR__ . DIRECTORY_SEPARATOR . $rpssPrefix . $updatedDate;

    $symfonyIndexFileObj = new SplFileObject($symfonyIndexFile);
    $result = '';

    while ($symfonyIndexFileObj->valid()) {
        $line = $symfonyIndexFileObj->fgets();

        // Do not include the require vendor/autoload line
        if (preg_match('#^require .*vendor/autoload#', $line)) {
            continue;
        }

        $line = str_replace('__DIR__', '$projectRootPath . \'/public\'', $line);

        $result .= $line;

        // Stop after the kernel has been created
        if (preg_match('#\$kernel\s*=\s*#', $line)) {
            break;
        }
    }

    file_put_contents($path, $result);
    $created = $path;
}

/*
 * Server start
 */
require $created;

// --- ReactPHP ----
if (!($port = isset($_SERVER['APP_PORT']) ? $_SERVER['APP_PORT'] : 8000)) {
    throw new \RuntimeException('APP_PORT environment variable is not defined. You need to define this environment variable to run the application as a server.');
}

$loop = \React\EventLoop\Factory::create();

$server = new \React\Http\Server(function (\Psr\Http\Message\ServerRequestInterface $request) use ($kernel, $projectRootPath) {
    $method = $request->getMethod();
    $headers = $request->getHeaders();
    $content = $request->getBody()->getContents();
    $path = $request->getUri()->getPath();

    echo 'RPHPS -- ', $method, ' ', $path;

    // Check if the file exists in the server to serve it
    if ($method === 'GET') {
        $resource = $projectRootPath . DIRECTORY_SEPARATOR . 'public'
            . str_replace('/', DIRECTORY_SEPARATOR, $path);

        if (file_exists($resource) && is_file($resource)) {
            return new \React\Http\Response(200, [], file_get_contents($resource));
        }
    }

    // Get POST parameters
    $post = [];

    if (
        \in_array(strtoupper($method), ['POST', 'PUT', 'DELETE', 'PATCH'])
        && isset($headers['Content-Type'])
        && (0 === strpos($headers['Content-Type'][0], 'application/x-www-form-urlencoded'))
    ) {
        parse_str($content, $post);
    }

    // Create the Symfony request
    $sfRequest = new \Symfony\Component\HttpFoundation\Request(
        $request->getQueryParams(),
        $post,
        [],
        [],
        $request->getUploadedFiles(),
        [],
        $content
    );

    $sfRequest->setMethod($method);
    $sfRequest->headers->replace($headers);
    $sfRequest->server->set('REQUEST_URI', $path);

//    if (isset($headers['Host'])) {
//        $sfRequest->server->set('SERVER_NAME', explode(':', $headers['Host'])[0]);
//    }

    try {
        $sfResponse = $kernel->handle($sfRequest);

        $kernel->terminate($sfRequest, $sfResponse);

        return new \React\Http\Response(
            $sfResponse->getStatusCode(),
            $sfResponse->headers->all(),
            $sfResponse->getContent()
        );
    } catch (\Throwable $e) {
        echo $e->getMessage(), "\n", $e->getTraceAsString();
    }
});

$socket = new \React\Socket\Server('0.0.0.0:' . $port, $loop);
$server->listen($socket);

echo "Server running on port $port\n";

$loop->run();