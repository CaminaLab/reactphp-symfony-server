<?php

/**
 * This file is part of the reactphp-symfony-server package.
 *
 * (c) Jordi DomÃ¨nech Bonilla
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
use Jdomenechb\ReactPhpSymfonyServer\Loop\RequestLoop;
use React\EventLoop\Factory;
use React\Http\Server as HttpServer;
use React\Socket\Server as SocketServer;
use Symfony\Component\Console\Output\ConsoleOutput;

require \dirname(__DIR__, 3) . '/autoload.php';

/*
 * Helpers
 */
$rpssPrefix = __DIR__ . '.reactphp-symfony-server-tmp';
$projectRootPath = \dirname(__DIR__, 4);

/*
 * Preparation of reference data
 */

// Check if the symfony index file exists
$symfonyIndexFile = $projectRootPath . DIRECTORY_SEPARATOR . 'public' . DIRECTORY_SEPARATOR . 'index.php';

$symfonyIndexFileInfoObj = new SplFileInfo($symfonyIndexFile);

if (!$symfonyIndexFileInfoObj->isFile()) {
    throw new RuntimeException('The file ' . $symfonyIndexFileInfoObj->getPath() . ' does not exist');
}

// Delete the old temporal file
if (is_file($rpssPrefix)) {
    unlink($rpssPrefix);
}

// Update the temporal data from Symfony index
echo "Updating Startup...\n";

$symfonyIndexFileObj = new SplFileObject($symfonyIndexFile);
$result = '';

while ($symfonyIndexFileObj->valid()) {
    $line = $symfonyIndexFileObj->fgets();

    // Do not include the require vendor/autoload line
    if (\preg_match('#^require .*vendor/autoload#', $line)) {
        continue;
    }

    $line = \str_replace('__DIR__', '$projectRootPath . \'/public\'', $line);

    $result .= $line;

    // Stop after the kernel has been created
    if (\preg_match('#\\$kernel\\s*=\\s*#', $line)) {
        break;
    }
}

\file_put_contents($rpssPrefix, $result);

/*
 * Server start
 */
require $rpssPrefix;

// --- ReactPHP ----
if (!($port = $_SERVER['APP_PORT'] ?? 8000)) {
    $msg = 'APP_PORT environment variable is not defined. You need to define this environment variable to run '
    . 'the application as a server.';

    throw new \RuntimeException($msg);
}

$loop = Factory::create();
$requestLoop = new RequestLoop($kernel, new ConsoleOutput(), $projectRootPath);

$server = new HttpServer([$requestLoop, 'request']);
$socket = new SocketServer('0.0.0.0:' . $port, $loop);
$server->listen($socket);

echo "Server running on port ${port}\n";

$loop->run();
