<?php

/**
 * This file is part of the reactphp-symfony-server package.
 *
 * (c) Jordi DomÃ¨nech Bonilla
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
require \dirname(__DIR__, 3) . '/autoload.php';

/*
 * Helpers
 */
$rpssPrefix = '.reactphp-symfony-server-dist-';
$projectRootPath = \dirname(__DIR__, 4);

/*
 * Preparation of reference data
 */

// Check if the symfony index file exists and extract its date
$symfonyIndexFile = $projectRootPath . DIRECTORY_SEPARATOR . 'public' . DIRECTORY_SEPARATOR . 'index.php';

$symfonyIndexFileInfoObj = new SplFileInfo($symfonyIndexFile);

if (!$symfonyIndexFileInfoObj->isFile()) {
    throw new RuntimeException('The file ' . $symfonyIndexFileInfoObj->getPath() . ' does not exist');
}

$symfonyIndexFileDate = $symfonyIndexFileInfoObj->getMTime();

// Extract the bin file date
$binDate = (new SplFileInfo(__FILE__))->getMTime();

// See which is the most recent
$updatedDate = \max($binDate, $symfonyIndexFileDate);

// Check if script file has been created and is updated
$created = false;

if ($files = \glob(__DIR__ . DIRECTORY_SEPARATOR . $rpssPrefix . '*')) {
    $file = \array_shift($files);

    // Extract the reference date
    \preg_match('#-(\\d+)$#', $file, $matches);
    $refDate = (int) $matches[1];

    if ($refDate === $updatedDate) {
        $created = $file;
    } else {
        \unlink($file);
    }
}

// Create the script if needed
if (!$created) {
    echo "Updating Startup...\n";

    $path = __DIR__ . DIRECTORY_SEPARATOR . $rpssPrefix . $updatedDate;

    $symfonyIndexFileObj = new SplFileObject($symfonyIndexFile);
    $result = '';

    while ($symfonyIndexFileObj->valid()) {
        $line = $symfonyIndexFileObj->fgets();

        // Do not include the require vendor/autoload line
        if (\preg_match('#^require .*vendor/autoload#', $line)) {
            continue;
        }

        $line = \str_replace('__DIR__', '$projectRootPath . \'/public\'', $line);

        $result .= $line;

        // Stop after the kernel has been created
        if (\preg_match('#\\$kernel\\s*=\\s*#', $line)) {
            break;
        }
    }

    \file_put_contents($path, $result);
    $created = $path;
}

/*
 * Server start
 */
require $created;

// --- ReactPHP ----
if (!($port = $_SERVER['APP_PORT'] ?? 8000)) {
    throw new \RuntimeException('APP_PORT environment variable is not defined. You need to define this environment variable to run the application as a server.');
}

$loop = \React\EventLoop\Factory::create();
$requestLoop = new \Jdomenechb\ReactPhpSymfonyServer\Loop\RequestLoop(
    $kernel,
    new \Symfony\Component\Console\Output\ConsoleOutput(),
    $projectRootPath
);

$server = new \React\Http\Server([$requestLoop, 'request']);
$socket = new \React\Socket\Server('0.0.0.0:' . $port, $loop);
$server->listen($socket);

echo "Server running on port ${port}\n";

$loop->run();
